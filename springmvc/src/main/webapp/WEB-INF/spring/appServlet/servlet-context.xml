<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan base-package="com.study.spring" />

	<interceptors>
		<interceptor>
			<mapping path="/**" />
			<exclude-mapping path="/login/**" />
			<exclude-mapping path="/*" />
			<beans:bean class="com.study.spring.interceptor.LoginCheckInterceptor"></beans:bean>
		</interceptor>
	</interceptors>

	<!-- default exception handler -->
	<beans:bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<beans:property name="exceptionMappings">
			<beans:map>
				<beans:entry key="ExceptionViewTestException" value="error/selectedErrorView" />
			</beans:map>
		</beans:property>
		<beans:property name="defaultErrorView" value="error/error" />
		<beans:property name="exceptionAttribute" value="ex" />

		<!-- Name of logger to use to log exceptions. Unset by default, so logging
			disabled -->
		<beans:property name="warnLogCategory" value="study.spring.exception" />
	</beans:bean>

<!--
	<aop:config>
		<aop:aspect ref="loggingAspect">
			<aop:pointcut expression="execution(* com.study.spring.admin.usermng.service..*Impl.*(..))" id="pointcut"/>
			<aop:around method="logging" pointcut-ref="pointcut"/> advice
		</aop:aspect>
	</aop:config>

	<beans:bean name="loggingAspect" class="com.study.spring.admin.usermng.service.LoggingAspect" />

 -->

	<!-- xml을 통한 트랜젝션관리 설정 -->
	<aop:config>
		<aop:pointcut id="requiredTx" expression="execution(* com.study.spring..impl.*Impl.*(..)) or execution(* egovframework.com..*Impl.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="requiredTx" />
	</aop:config>

	<!--* transaction-manager="transactionManager" 부분은 트랜젝션Manager 빈의 이름이  transactionManager일 경우 생략가능-->
	<!--* rollback-for 미지정시 RuntimeException(기본값) 발생시만 rollback -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="Exception"/>
<!-- 			<tx:method name="update*" rollback-for="Exception"/>
			<tx:method name="insert*" rollback-for="Exception"/>
			<tx:method name="save*" rollback-for="Exception"/> -->
		</tx:attributes>
	</tx:advice>

	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
</beans:beans>
